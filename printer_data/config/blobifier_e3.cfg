
##########################################################################################
# Main macro. call this in the Happy Hare 
# _MMU_POST_LOAD macro using the variable_user_post_load_extension:
#
# variable_user_post_load_extension : `BLOBIFIER_E3`
#
# Notes on parameters:
# PURGE_LENGTH=[float] (optional) The length to purge. If omitted (default) it will check
#                      the purge_volumes matrix or variable_purge_length. This can be used
#                      to override and for testing.
#
[gcode_macro BLOBIFIER_E3]

# These parameters define your filament purging.
# Note that the control of retraction is set in 'mmu_macro_vars.cfg' which can be increased
# if you experience excessive oozing.
variable_purge_spd: 450                 # Speed, in mm/min, of the purge.
variable_purge_temp_min: 200            # Minimum nozzle purge temperature.


# Define the part fan name if you are using a fan other than [fan]
# Applies to [fan_generic] or other fan definitons
# Example would be if you are using auxiliary fan control in Orcaslicer (https://github.com/SoftFever/OrcaSlicer/wiki/Auxiliary-fan)
# If you are unsure if you need this, then probably just leave it commented out.

#variable_fan_name: "fan_generic fan0"

# ========================================================================================
# ==================== PURGE LENGTH TUNING ===============================================
# ========================================================================================

# The absolute minimum to purge, even if you don't changed tools. This is to prime the 
# nozzle before printing
variable_purge_length_minimum: 30

# The maximum amount of filament (in mmÂ¹) to purge in a single blob. Blobifier will 
# automatically purge multiple blobs if the purge amount exceeds this.
variable_purge_length_maximum: 150

# Default purge length to fall back on when neither the tool map purge_volumes or 
# parameter PURGE_LENGTH is set.
variable_purge_length: 150

# The slicer values often are a bit too wasteful. Tune it here to get optimal values. 
# 0.6 (60%) is a good starting point.
variable_purge_length_modifier: 1

# Fixed length of filament to add after the purge volume calculation. Happy Hare already
# shares info on the extra amount of filament to purge based on known residual filament,
# tip cutting fragment and initial retraction setting. However this setting can add a fixed
# amount on top on that if necessary although it is recommended to start with 0 and tune
# slicer purge matrix first.
# When should you alter this value:
#   INCREASE: When the dark to light swaps are good, but light to dark aren't.
#   DECREASE: When the light to dark swaps are good, but dark to light aren't. Don't 
#     forget to increase the purge_length_modifier
variable_purge_length_addition: 0

gcode:

  # ======================================================================================
  # ==================== RECORD STATE (INCL. FANS, SPEEDS, ETC...) =======================
  # ======================================================================================

  # General state
  SAVE_GCODE_STATE NAME=BLOBIFIER_state

  
    # ======================================================================================
    # ==================== DEFINE BASIC VARIABLES ==========================================
    # ======================================================================================
    
    {% set sequence_vars = printer['gcode_macro _MMU_SEQUENCE_VARS'] %}
    {% set park_vars = printer['gcode_macro _MMU_PARK'] %}
    {% set filament_diameter = printer.configfile.config.extruder.filament_diameter|float %}
    {% set filament_cross_section = (filament_diameter/2) ** 2 * 3.1415 %}
    {% set from_tool = printer.mmu.last_tool %}
    {% set to_tool = printer.mmu.tool %}
    {% set bl_count = printer['gcode_macro _BLOBIFIER_COUNT'] %}
    {% set pos = printer.gcode_move.gcode_position %}
    {% set safe = printer['gcode_macro _BLOBIFIER_SAFE_DESCEND'] %}
    {% set ignore_safe = safe.print_height < force_safe_descend_height_until %}
    {% set restore_z = [printer['gcode_macro BLOBIFIER_PARK'].restore_z,pos.z]|max %}
    {% set pos_max = printer.toolhead.axis_maximum %}
    {% set position_y = pos_max.y - skew_correction %}

    # Get purge volumes from the slicer (if set up right. see 
    # https://github.com/moggieuk/Happy-Hare/wiki/Gcode-Preprocessing)
    {% set pv = printer.mmu.slicer_tool_map.purge_volumes %}
    
	
	
	#########################################
	####### SETUP
	
	 G28 X                                 ;Home X
	 mmu_servo pos=up
	 SET_SERVO SERVO=purge ANGLE=180       
	 ;M118 Purge
	 ;G90
	 ;M83
	 ;G1 E150 F450                          ;Extrude 150mm
	 ;G1 E!purge_volumes! F450              ;Extrude
	 ;G4 P2000                              ;Wait 2 Seconds for Filament to cool on purge plate
	 	 
    ####################################
	
	
	
	
    # ======================================================================================
    # ==================== DETERMINE PURGE LENGTH ==========================================
    # ======================================================================================

    {% if params.PURGE_LENGTH %} # =============== PARAM PURGE LENGTH ======================
      {action_respond_info("BLOBIFIER: param PURGE_LENGTH provided")}
      {% set purge_len = params.PURGE_LENGTH|float %}
    {% elif from_tool == to_tool and to_tool >= 0 %} # ==== TOOL DIDN'T CHANGE =============
      {action_respond_info("BLOBIFIER: Tool didn't change (T%s > T%s), %s" % (from_tool, to_tool, "priming" if purge_length_minimum else "skipping"))}
      {% set purge_len = 0 %}

    {% elif pv %} # ============== FETCH FROM HAPPY HARE (LIKELY FROM SLICER) ==============
      {% if from_tool < 0 and to_tool >= 0%}
        {action_respond_info("BLOBIFIER: from tool unknown. Finding largest value for T? > T%d" % to_tool)}
        {% set purge_vol = pv|map(attribute=to_tool)|max %}
      {% elif to_tool < 0 %}
        {action_respond_info("BLOBIFIER: tool(s) unknown. Finding largest value")}
        {% set purge_vol = pv|map('max')|max %}
      {% else %}
        {% set purge_vol = pv[from_tool][to_tool]|float * purge_length_modifier %}
        {action_respond_info("BLOBIFIER: Swapped T%s > T%s" % (from_tool, to_tool))}
      {% endif %}
      {% set purge_len = purge_vol / filament_cross_section %}

      {% set purge_len = purge_len + printer.mmu.extruder_filament_remaining + park_vars.retracted_length + purge_length_addition %}

    {% else %} # ========================= USE CONFIG VARIABLE =============================
      {action_respond_info("BLOBIFIER: No toolmap or PURGE_LENGTH. Using default")}
      {% set purge_len = purge_length|float + printer.mmu.extruder_filament_remaining + park_vars.retracted_length %}
    {% endif %}

    # ==================================== APPLY PURGE MINIMUM =============================
    {% set purge_len = [purge_len,purge_length_minimum]|max|round(0, 'ceil')|int %}
    {action_respond_info("BLOBIFIER: Purging %dmm of filament" % (purge_len))}

    # ======================================================================================
    # ==================== PURGING SEQUENCE ================================================
    # ======================================================================================

    # Set to absolute positioning.
    G90

    # Check for purge length and purge if necessary.
    {% if purge_len|float > 0 %}


      # ====================================================================================
      # ==================== HEAT HOTEND ===================================================
      # ====================================================================================
      
      {% if printer.extruder.temperature < purge_temp_min %}
        {% if printer.extruder.target < purge_temp_min %}
          M109 S{purge_temp_min}
        {% else %}
          TEMPERATURE_WAIT SENSOR=extruder MINIMUM={purge_temp_min}
        {% endif %}
      {% endif %}

      # ====================================================================================
      # ==================== START ITERATING ===============================================
      # ====================================================================================
      
      # Calculate total number of iterations based on the purge length and the max_iteration 
      # length.
      {% set blobs = (purge_len / purge_length_maximum)|round(0, 'ceil')|int %}
      {% set purge_per_blob = purge_len|float / blobs %}
      {% set retracts_per_blob = (purge_per_blob / 40)|round(0, 'ceil')|int %}
      {% set purge_per_retract = (purge_per_blob / retracts_per_blob)|int %}
      {% set pulses_per_retract = (purge_per_blob / retracts_per_blob / 5)|round(0, 'ceil')|int %}
      {% set pulses_per_blob = (purge_per_blob / 5)|round(0, 'ceil')|int %}
      {% set purge_per_pulse = purge_per_blob / pulses_per_blob %}
      {% set pulse_time_constant = purge_per_pulse * 0.95 / purge_spd / (purge_per_pulse * 0.95 / purge_spd + purge_per_pulse * 0.05 / 50) %}
      {% set pulse_duration = purge_per_pulse / purge_spd %}

      # Repeat the process until purge_len is reached
      {% for blob in range(blobs) %}
        RESPOND MSG={"'BLOBIFIER: Blob %d of %d (%.1fmm)'" % (blob + 1, blobs, purge_per_blob)}

        {% if safe.tray or ignore_safe %}
          G1 Z{tray_top + purge_start} F{travel_spd_z}
        {% endif %}

        # relative positioning
        G91 
        # relative extrusion
        M83

        # Purge filament in a pulsating motion to purge the filament quicker and better
        {% for pulse in range(pulses_per_blob) %}
          # Calculations to determine z-speed
          {% set purged_this_blob = pulse * purge_per_pulse %}
          {% set z_last_pos = purge_start + ((purged_this_blob)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_pos = purge_start + ((purged_this_blob + purge_per_pulse)/purge_length_maximum)**z_raise_exp * z_raise %}
          {% set z_up = z_pos - z_last_pos %}
          {% set speed = z_up / pulse_duration %}

          # Purge quickly
          G1 Z{z_up * pulse_time_constant} E{purge_per_pulse * 0.95} F{speed}
          # Purge a tiny bit slowly
          G1 Z{z_up * (1 - pulse_time_constant)} E{purge_per_pulse * 0.05} F{speed}

          # retract and unretract filament every now and then for thorough cleaning
          {% if pulse % pulses_per_retract == 0 and pulse > 0 %}
            G1 E-2 F1800
            G1 E2 F800
          {% endif %}
          
        {% endfor %}

        # Retract to match what Happy Hare is expecting
        G1 E-{park_vars.retracted_length} F{sequence_vars.retract_speed * 60}
   
      {% endfor %}
    
	
    # ======================================================================================
    # ==================== RESTORE STATE ===================================================
    # ======================================================================================
    G90 # absolute positioning
    G1 Z{restore_z} F{travel_spd_z}
    
    {% if part_cooling_fan >= 0 %}
      # Reset part cooling fan if it was changed
      M106 S{(backup_fan_speed * 255)|int}
    {% endif %}
    
    M220 S{(backup_feedrate * 100)|int}
  {% endif %}


	#########################################
	####### WIPE
	 M118 Purge
     G90
     M83
	 G1 X5 F10800                          ;Move over wiper 
	 G4 P500                               ;Wait 0.5 Seconds before retract
	 G1 E-5 F420                           ;Retract 5mm
	 M118 Dump and shake                   ;Dump Start
	 SET_SERVO SERVO=purge ANGLE=50
	 G4 P500                               ;Wait 0.5 Seconds before shake
	 SET_SERVO SERVO=purge ANGLE=100
	 SET_SERVO SERVO=purge ANGLE=50
	 SET_SERVO SERVO=purge ANGLE=100
	 SET_SERVO SERVO=purge ANGLE=50
	 M118 Wipe                             ;Wipe Start 
	 G1 X-11.5 F10800  ;1
	 G1 X3 F10800
	 G1 X-11.5 F10800  ;2
	 G1 X3 F10800
	 G1 X-11.5 F10800  ;3
	 G1 X3 F10800
	 G1 X-11.5 F10800  ;4
	 G1 X3 F10800
	 G1 X-11.5 F10800  ;5
	 SET_SERVO SERVO=purge ANGLE=180       ;Return servos
	 mmu_servo pos=down

 
  RESTORE_GCODE_STATE NAME=BLOBIFIER_state 

